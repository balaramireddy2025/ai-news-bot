import os
import cv2
import numpy as np
from gtts import gTTS
import requests
import subprocess
from datetime import datetime
import time 
import sys

# ------------------------------
# Quick FFmpeg check
# ------------------------------
try:
    subprocess.run(['ffmpeg', '-version'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
except FileNotFoundError:
    sys.exit("FFmpeg not installed or not in PATH. Please check dependencies.")

# ------------------------------
# Telegram config
# ------------------------------
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    sys.exit("Telegram token or chat ID not set in environment.")

# ------------------------------
# AI News content (EXPAND THIS BLOCK FOR LONGER MESSAGES/AUDIO)
# ------------------------------
news_text = """
🔔 AI News Daily - Your update for today! 🔔

**HEADLINE: AI Innovation Drives Global Sustainability Efforts**

Artificial intelligence is rapidly becoming a cornerstone of global efforts to combat climate change and enhance sustainability. Recent developments show AI being deployed across multiple sectors to optimize resource allocation, reduce waste, and improve prediction models.

* **Energy Optimization:** In the energy sector, AI algorithms are managing smart grids, predicting energy demand with unprecedented accuracy, and dynamically adjusting renewable energy sources like solar and wind farms to maximize efficiency. This alone is projected to cut carbon emissions by 15% in pilot cities.
* **5G-A Networks:** The rollout of 5G-Advanced (5G-A) networks is also leveraging AI to fine-tune network performance, making connectivity more efficient and consuming less power per gigabyte of data transferred. This is crucial for enabling the IoT devices that power many smart city sustainability projects.
* **Entrepreneurship and AI:** A new wave of startups is utilizing large language models and computer vision to tackle environmental issues, such as monitoring deforestation in real-time and automating the sorting of complex recyclables. This blend of AI and entrepreneurship is fueling rapid innovation in areas previously limited by manual labor.

Watch the video report below for the full story!
"""

# ------------------------------
# Convert text to speech
# ------------------------------
audio_file = "news.mp3"
# Use clean text for gTTS generation (we exclude the last line and the bold/markdown characters for better audio generation)
gtts_text_lines = news_text.splitlines()
# Exclude the final "Watch the video report..." line
gtts_text = "\n".join(gtts_text_lines[:-1]).strip()
# Clean up markdown for gTTS
gtts_text = gtts_text.replace("*", "").replace(":", ".").replace("-", " ")

# The current text will be much longer, generating a significantly longer audio file (e.g., 40-60 seconds)
# NOTE: The resulting MP3 will be clipped to the first 15 seconds by the video duration, but the video will use the first 15 seconds of the audio.
tts = gTTS(text=gtts_text, lang="en")
tts.save(audio_file)

# ------------------------------
# Create video with OpenCV
# ------------------------------
width, height = 1280, 720
fps = 24
duration = 15  # seconds - FORCED DURATION
num_frames = fps * duration

# Use a temporary file name for the video generated by OpenCV
temp_output_file = "temp_ai_news_video.mp4" 
fourcc = cv2.VideoWriter_fourcc(*'mp4v') 
video_writer = cv2.VideoWriter(temp_output_file, fourcc, fps, (width, height))

font = cv2.FONT_HERSHEY_SIMPLEX
font_scale = 1.0 # Reduced font scale slightly for longer text to fit
color = (255, 255, 255)
thickness = 2
bg_color = (0, 0, 0)
# Use the full news_text for the visual display, but clean the markdown for better display
visual_text = news_text.replace("**", "")

for _ in range(num_frames):
    frame = np.full((height, width, 3), bg_color, dtype=np.uint8)
    y0, dy = height // 2, 40 # Reduced line spacing slightly
    
    # Render the text
    lines = visual_text.strip().split('\n')
    text_height = len(lines) * dy
    start_y = y0 - text_height // 2 
    
    for i, line in enumerate(lines):
        if line.strip():
            y = start_y + i * dy
            cv2.putText(frame, line.strip(), (50, y), font, font_scale, color, thickness, cv2.LINE_AA)
            
    video_writer.write(frame)

video_writer.release()

# ------------------------------
# Merge and re-encode audio/video using FFmpeg
# ------------------------------
final_output = f"ai_news_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
print(f"Starting FFmpeg to create a {duration}-second video: {final_output}")

subprocess.run([
    'ffmpeg', '-y',
    '-i', temp_output_file, 
    '-i', audio_file,       
    '-c:v', 'libx264',      
    '-preset', 'veryfast',  
    '-pix_fmt', 'yuv420p',  
    '-c:a', 'aac',          
    '-b:a', '192k',
    '-t', '15.0',           # <-- GUARANTEES 15 SECONDS
    final_output
], check=True)

print(f"✅ Video creation complete.")
os.remove(temp_output_file)

# ------------------------------
# 1. Send TEXT MESSAGE to Telegram
# ------------------------------
print("--- Attempting to send text message to Telegram... ---")
text_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
response = requests.post(text_url, data={
    "chat_id": TELEGRAM_CHAT_ID, 
    "text": news_text,
    "parse_mode": "Markdown" 
})

if response.status_code == 200:
    print("✅ Text message sent successfully.")
else:
    print(f"❌ Error sending text message. Status Code: {response.status_code}")
    print(f"Response: {response.text}") 

time.sleep(1)

# ------------------------------
# 2. Send VIDEO to Telegram
# ------------------------------
print("--- Attempting to send video to Telegram... ---")
with open(final_output, "rb") as f:
    video_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendVideo"
    video_caption = f"Full AI News Report - {datetime.now().strftime('%Y-%m-%d')}"
    
    response = requests.post(video_url, data={
        "chat_id": TELEGRAM_CHAT_ID, 
        "caption": video_caption
    }, files={"video": f})

if response.status_code == 200:
    print(f"✅ Video sent successfully.")
else:
    print(f"❌ Error sending video. Status Code: {response.status_code}")
    print(f"Response: {response.text}") 

# Final cleanup
os.remove(final_output)
os.remove(audio_file)
